# -*- coding: utf-8 -*-
"""Untitled12.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1FigN4PTMHYeWxClFyoXdnLxYrgfvJ4ZW
"""

import numpy as np
import pandas as pd
import itertools
from sklearn.model_selection import train_test_split
from sklearn.feature_extraction.text import TfidfVectorizer
from sklearn.linear_model import PassiveAggressiveClassifier
from sklearn.metrics import accuracy_score, confusion_matrix

#Reading the training data
df=pd.read_csv('news.csv')

#Getting shape and head
df.shape
df.head()

#Getting the labels
labels=df.label
labels.head()

X = df['text']
 y = df['label']

# # Split the data into training and test sets
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.25, random_state=42)

#Initializing a TfidfVectorizer with stop words from the English language and a maximum document frequency of 0.7
tfidf_vectorizer = TfidfVectorizer(stop_words='english', max_df=0.7)

# Fitting and transforming the training data
tfidf_train = tfidf_vectorizer.fit_transform(X_train)

# Transforming the test data
tfidf_test = tfidf_vectorizer.transform(X_test)

# Initialize a PassiveAggressiveClassifier
pac = PassiveAggressiveClassifier(max_iter=50)
pac.fit(tfidf_train, y_train)

# Predicting on the test set
y_pred = pac.predict(tfidf_test)

# Calculate accuracy
score = accuracy_score(y_test, y_pred)
print('Accuracy:', '{:.2f}%'.format(score * 100))

#DataFlair - Build confusion matrix
confusion_matrix(y_test,y_pred, labels=['FAKE','REAL'])

import pandas as pd
from sklearn.feature_extraction.text import TfidfVectorizer
from sklearn.linear_model import PassiveAggressiveClassifier
from sklearn.metrics import accuracy_score

# Example data reading and preparation
try:
    df_test = pd.read_csv('test_data.csv', engine='python')
except pd.errors.ParserError as e:
    print("ParserError:", e)
    # Handle the error appropriately (e.g., logging, alternative action)

# Assuming df_test is successfully read
if 'df_test' in locals():
    # Read your test data
    X_test = df_test['text']  # Assuming 'text' is your feature column in test data
    y_test = df_test['label']  # Assuming 'label' is your target column in test data



    # Optionally, you can print other evaluation metrics or confusion matrix
    # Example: confusion_matrix = confusion_matrix(y_test, y_pred)
    #          print('Confusion Matrix:')
    #          print(confusion_matrix)

# Initialize a TfidfVectorizer with the same parameters as used during training
tfidf_vectorizer = TfidfVectorizer(stop_words='english', max_df=0.7)

    # Fit and transform the training data to learn the vocabulary and IDF weights
    # Assuming X_train is your training data
tfidf_train = tfidf_vectorizer.fit_transform(X_train)

    # Transform the test data using the fitted vectorizer
tfidf_test = tfidf_vectorizer.transform(X_test)

    # Assuming you have already trained your model and have pac
    # Initialize a PassiveAggressiveClassifier
pac = PassiveAggressiveClassifier(max_iter=50)
pac.fit(tfidf_train, y_train)

    # Predict on the test set
y_pred = pac.predict(tfidf_test)

    # Calculate accuracy if you have y_test for comparison
accuracy = accuracy_score(y_test, y_pred)
print('Accuracy:', '{:.2f}%'.format(score * 100))

confusion_matrix = confusion_matrix(y_test, y_pred)
print('Confusion Matrix:')
print(confusion_matrix)